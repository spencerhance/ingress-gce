/*
Copyright 2019 Google LLC
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
https://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was generated by "go run gen/main.go". Do not edit directly.
// directly.

package composite

import (
	"encoding/json"
	"fmt"

	"k8s.io/klog"

	gcecloud "github.com/GoogleCloudPlatform/k8s-cloud-provider/pkg/cloud"
	"github.com/GoogleCloudPlatform/k8s-cloud-provider/pkg/cloud/meta"
	computealpha "google.golang.org/api/compute/v0.alpha"
	computebeta "google.golang.org/api/compute/v0.beta"
	compute "google.golang.org/api/compute/v1"
	"google.golang.org/api/googleapi"
	"k8s.io/kubernetes/pkg/cloudprovider/providers/gce"
)

// Backend is a composite type wrapping the Alpha, Beta, and GA methods for its GCE equivalent
type Backend struct {
	BalancingMode             string   `json:"balancingMode,omitempty"`
	CapacityScaler            float64  `json:"capacityScaler,omitempty"`
	Description               string   `json:"description,omitempty"`
	Failover                  bool     `json:"failover,omitempty"`
	Group                     string   `json:"group,omitempty"`
	MaxConnections            int64    `json:"maxConnections,omitempty"`
	MaxConnectionsPerEndpoint int64    `json:"maxConnectionsPerEndpoint,omitempty"`
	MaxConnectionsPerInstance int64    `json:"maxConnectionsPerInstance,omitempty"`
	MaxRate                   int64    `json:"maxRate,omitempty"`
	MaxRatePerEndpoint        float64  `json:"maxRatePerEndpoint,omitempty"`
	MaxRatePerInstance        float64  `json:"maxRatePerInstance,omitempty"`
	MaxUtilization            float64  `json:"maxUtilization,omitempty"`
	ForceSendFields           []string `json:"-"`
	NullFields                []string `json:"-"`
}

// BackendService is a composite type wrapping the Alpha, Beta, and GA methods for its GCE equivalent
type BackendService struct {
	// Version keeps track of the intended compute version for this BackendService.
	// Note that the compute API's do not contain this field. It is for our
	// own bookkeeping purposes.
	Version                  meta.Version                        `json:"-"`
	AffinityCookieTtlSec     int64                               `json:"affinityCookieTtlSec,omitempty"`
	AppEngineBackend         *BackendServiceAppEngineBackend     `json:"appEngineBackend,omitempty"`
	Backends                 []*Backend                          `json:"backends,omitempty"`
	CdnPolicy                *BackendServiceCdnPolicy            `json:"cdnPolicy,omitempty"`
	CloudFunctionBackend     *BackendServiceCloudFunctionBackend `json:"cloudFunctionBackend,omitempty"`
	ConnectionDraining       *ConnectionDraining                 `json:"connectionDraining,omitempty"`
	CreationTimestamp        string                              `json:"creationTimestamp,omitempty"`
	CustomRequestHeaders     []string                            `json:"customRequestHeaders,omitempty"`
	Description              string                              `json:"description,omitempty"`
	EnableCDN                bool                                `json:"enableCDN,omitempty"`
	FailoverPolicy           *BackendServiceFailoverPolicy       `json:"failoverPolicy,omitempty"`
	Fingerprint              string                              `json:"fingerprint,omitempty"`
	HealthChecks             []string                            `json:"healthChecks,omitempty"`
	Iap                      *BackendServiceIAP                  `json:"iap,omitempty"`
	Id                       uint64                              `json:"id,omitempty,string"`
	Kind                     string                              `json:"kind,omitempty"`
	LoadBalancingScheme      string                              `json:"loadBalancingScheme,omitempty"`
	Name                     string                              `json:"name,omitempty"`
	Port                     int64                               `json:"port,omitempty"`
	PortName                 string                              `json:"portName,omitempty"`
	Protocol                 string                              `json:"protocol,omitempty"`
	Region                   string                              `json:"region,omitempty"`
	SecurityPolicy           string                              `json:"securityPolicy,omitempty"`
	SelfLink                 string                              `json:"selfLink,omitempty"`
	SessionAffinity          string                              `json:"sessionAffinity,omitempty"`
	TimeoutSec               int64                               `json:"timeoutSec,omitempty"`
	googleapi.ServerResponse `json:"-"`
	ForceSendFields          []string `json:"-"`
	NullFields               []string `json:"-"`
}

// BackendServiceAppEngineBackend is a composite type wrapping the Alpha, Beta, and GA methods for its GCE equivalent
type BackendServiceAppEngineBackend struct {
	AppEngineService string   `json:"appEngineService,omitempty"`
	TargetProject    string   `json:"targetProject,omitempty"`
	Version          string   `json:"version,omitempty"`
	ForceSendFields  []string `json:"-"`
	NullFields       []string `json:"-"`
}

// BackendServiceCdnPolicy is a composite type wrapping the Alpha, Beta, and GA methods for its GCE equivalent
type BackendServiceCdnPolicy struct {
	CacheKeyPolicy          *CacheKeyPolicy `json:"cacheKeyPolicy,omitempty"`
	SignedUrlCacheMaxAgeSec int64           `json:"signedUrlCacheMaxAgeSec,omitempty,string"`
	SignedUrlKeyNames       []string        `json:"signedUrlKeyNames,omitempty"`
	ForceSendFields         []string        `json:"-"`
	NullFields              []string        `json:"-"`
}

// BackendServiceCloudFunctionBackend is a composite type wrapping the Alpha, Beta, and GA methods for its GCE equivalent
type BackendServiceCloudFunctionBackend struct {
	FunctionName    string   `json:"functionName,omitempty"`
	TargetProject   string   `json:"targetProject,omitempty"`
	ForceSendFields []string `json:"-"`
	NullFields      []string `json:"-"`
}

// BackendServiceFailoverPolicy is a composite type wrapping the Alpha, Beta, and GA methods for its GCE equivalent
type BackendServiceFailoverPolicy struct {
	DisableConnectionDrainOnFailover bool     `json:"disableConnectionDrainOnFailover,omitempty"`
	DropTrafficIfUnhealthy           bool     `json:"dropTrafficIfUnhealthy,omitempty"`
	FailoverRatio                    float64  `json:"failoverRatio,omitempty"`
	ForceSendFields                  []string `json:"-"`
	NullFields                       []string `json:"-"`
}

// BackendServiceIAP is a composite type wrapping the Alpha, Beta, and GA methods for its GCE equivalent
type BackendServiceIAP struct {
	Enabled                  bool                               `json:"enabled,omitempty"`
	Oauth2ClientId           string                             `json:"oauth2ClientId,omitempty"`
	Oauth2ClientInfo         *BackendServiceIAPOAuth2ClientInfo `json:"oauth2ClientInfo,omitempty"`
	Oauth2ClientSecret       string                             `json:"oauth2ClientSecret,omitempty"`
	Oauth2ClientSecretSha256 string                             `json:"oauth2ClientSecretSha256,omitempty"`
	ForceSendFields          []string                           `json:"-"`
	NullFields               []string                           `json:"-"`
}

// BackendServiceIAPOAuth2ClientInfo is a composite type wrapping the Alpha, Beta, and GA methods for its GCE equivalent
type BackendServiceIAPOAuth2ClientInfo struct {
	ApplicationName       string   `json:"applicationName,omitempty"`
	ClientName            string   `json:"clientName,omitempty"`
	DeveloperEmailAddress string   `json:"developerEmailAddress,omitempty"`
	ForceSendFields       []string `json:"-"`
	NullFields            []string `json:"-"`
}

// CacheKeyPolicy is a composite type wrapping the Alpha, Beta, and GA methods for its GCE equivalent
type CacheKeyPolicy struct {
	IncludeHost          bool     `json:"includeHost,omitempty"`
	IncludeProtocol      bool     `json:"includeProtocol,omitempty"`
	IncludeQueryString   bool     `json:"includeQueryString,omitempty"`
	QueryStringBlacklist []string `json:"queryStringBlacklist,omitempty"`
	QueryStringWhitelist []string `json:"queryStringWhitelist,omitempty"`
	ForceSendFields      []string `json:"-"`
	NullFields           []string `json:"-"`
}

// ConnectionDraining is a composite type wrapping the Alpha, Beta, and GA methods for its GCE equivalent
type ConnectionDraining struct {
	DrainingTimeoutSec int64    `json:"drainingTimeoutSec,omitempty"`
	ForceSendFields    []string `json:"-"`
	NullFields         []string `json:"-"`
}

func CreateBackendService(backendService *BackendService, cloud *gce.Cloud) error {
	ctx, cancel := gcecloud.ContextWithCallTimeout()
	defer cancel()

	switch backendService.Version {
	case meta.VersionAlpha:
		alpha, err := backendService.toAlpha()
		if err != nil {
			return err
		}
		klog.V(3).Infof("Creating alpha BackendService %v", alpha.Name)
		return cloud.Compute().AlphaBackendServices().Insert(ctx, meta.GlobalKey(backendService.Name), alpha)
	case meta.VersionBeta:
		beta, err := backendService.toBeta()
		if err != nil {
			return err
		}
		klog.V(3).Infof("Creating beta BackendService %v", beta.Name)
		return cloud.Compute().BetaBackendServices().Insert(ctx, meta.GlobalKey(backendService.Name), beta)
	default:
		ga, err := backendService.toGA()
		if err != nil {
			return err
		}
		klog.V(3).Infof("Creating ga BackendService %v", ga.Name)
		return cloud.Compute().BackendServices().Insert(ctx, meta.GlobalKey(backendService.Name), ga)
	}
}

func UpdateBackendService(backendService *BackendService, cloud *gce.Cloud) error {
	ctx, cancel := gcecloud.ContextWithCallTimeout()
	defer cancel()

	switch backendService.Version {
	case meta.VersionAlpha:
		alpha, err := backendService.toAlpha()
		if err != nil {
			return err
		}
		klog.V(3).Infof("Updating alpha BackendService %v", alpha.Name)
		return cloud.Compute().AlphaBackendServices().Update(ctx, meta.GlobalKey(backendService.Name), alpha)
	case meta.VersionBeta:
		beta, err := backendService.toBeta()
		if err != nil {
			return err
		}
		klog.V(3).Infof("Updating beta BackendService %v", beta.Name)
		return cloud.Compute().BetaBackendServices().Update(ctx, meta.GlobalKey(backendService.Name), beta)
	default:
		ga, err := backendService.toGA()
		if err != nil {
			return err
		}
		klog.V(3).Infof("Updating ga BackendService %v", ga.Name)
		return cloud.Compute().BackendServices().Update(ctx, meta.GlobalKey(backendService.Name), ga)
	}
}

func GetBackendService(name string, version meta.Version, cloud *gce.Cloud) (*BackendService, error) {
	ctx, cancel := gcecloud.ContextWithCallTimeout()
	defer cancel()

	var gceObj interface{}
	var err error
	switch version {
	case meta.VersionAlpha:
		gceObj, err = cloud.Compute().AlphaBackendServices().Get(ctx, meta.GlobalKey(name))
	case meta.VersionBeta:
		gceObj, err = cloud.Compute().BetaBackendServices().Get(ctx, meta.GlobalKey(name))
	default:
		gceObj, err = cloud.Compute().BackendServices().Get(ctx, meta.GlobalKey(name))
	}
	if err != nil {
		return nil, err
	}
	return toBackendService(gceObj)
}

// toBackendService converts a compute alpha, beta or GA
// BackendService into our composite type.
func toBackendService(obj interface{}) (*BackendService, error) {
	be := &BackendService{}
	bytes, err := json.Marshal(obj)
	if err != nil {
		return nil, fmt.Errorf("could not marshal object %+v to JSON: %v", obj, err)
	}
	err = json.Unmarshal(bytes, be)
	if err != nil {
		return nil, fmt.Errorf("error unmarshalling to BackendService: %v", err)
	}
	return be, nil
}

// toAlpha converts our composite type into an alpha type.
// This alpha type can be used in GCE API calls.
func (backendService *BackendService) toAlpha() (*computealpha.BackendService, error) {
	bytes, err := json.Marshal(backendService)
	if err != nil {
		return nil, fmt.Errorf("error marshalling BackendService to JSON: %v", err)
	}
	alpha := &computealpha.BackendService{}
	err = json.Unmarshal(bytes, alpha)
	if err != nil {
		return nil, fmt.Errorf("error unmarshalling BackendService JSON to compute alpha type: %v", err)
	}
	// Set force send fields. This is a temporary hack.
	if alpha.CdnPolicy != nil && alpha.CdnPolicy.CacheKeyPolicy != nil {
		alpha.CdnPolicy.CacheKeyPolicy.ForceSendFields = []string{"IncludeHost", "IncludeProtocol", "IncludeQueryString", "QueryStringBlacklist", "QueryStringWhitelist"}
	}
	if alpha.Iap != nil {
		alpha.Iap.ForceSendFields = []string{"Enabled", "Oauth2ClientId", "Oauth2ClientSecret"}
	}

	return alpha, nil
}

// toBeta converts our composite type into an alpha type.
// This alpha type can be used in GCE API calls.
func (backendService *BackendService) toBeta() (*computebeta.BackendService, error) {
	bytes, err := json.Marshal(backendService)
	if err != nil {
		return nil, fmt.Errorf("error marshalling BackendService to JSON: %v", err)
	}
	beta := &computebeta.BackendService{}
	err = json.Unmarshal(bytes, beta)
	if err != nil {
		return nil, fmt.Errorf("error unmarshalling BackendService JSON to compute beta type: %v", err)
	}
	// Set force send fields. This is a temporary hack.
	if beta.CdnPolicy != nil && beta.CdnPolicy.CacheKeyPolicy != nil {
		beta.CdnPolicy.CacheKeyPolicy.ForceSendFields = []string{"IncludeHost", "IncludeProtocol", "IncludeQueryString", "QueryStringBlacklist", "QueryStringWhitelist"}
	}
	if beta.Iap != nil {
		beta.Iap.ForceSendFields = []string{"Enabled", "Oauth2ClientId", "Oauth2ClientSecret"}
	}

	return beta, nil
}

// toGA converts our composite type into an alpha type.
// This alpha type can be used in GCE API calls.
func (backendService *BackendService) toGA() (*compute.BackendService, error) {
	bytes, err := json.Marshal(backendService)
	if err != nil {
		return nil, fmt.Errorf("error marshalling BackendService to JSON: %v", err)
	}
	ga := &compute.BackendService{}
	err = json.Unmarshal(bytes, ga)
	if err != nil {
		return nil, fmt.Errorf("error unmarshalling BackendService JSON to compute ga type: %v", err)
	}
	// Set force send fields. This is a temporary hack.
	if ga.CdnPolicy != nil && ga.CdnPolicy.CacheKeyPolicy != nil {
		ga.CdnPolicy.CacheKeyPolicy.ForceSendFields = []string{"IncludeHost", "IncludeProtocol", "IncludeQueryString", "QueryStringBlacklist", "QueryStringWhitelist"}
	}
	if ga.Iap != nil {
		ga.Iap.ForceSendFields = []string{"Enabled", "Oauth2ClientId", "Oauth2ClientSecret"}
	}

	return ga, nil
}
